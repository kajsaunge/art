{
  "{\"sourceRoot\":\"/Users/kung/Projects/trainings/the-arts\",\"babelrc\":false,\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"/Users/kung/Projects/trainings/the-arts\",\"filename\":\"/Users/kung/Projects/trainings/the-arts/url-to-withrouter.js\",\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/kung/Projects/trainings/the-arts\",\"plugins\":[{\"key\":\"proposal-class-properties\",\"visitor\":{\"PrivateName\":{\"enter\":[null]},\"ExportDefaultDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"transform-flow-strip-types\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]},\"ImportDeclaration\":{\"enter\":[null,null]},\"ClassProperty\":{\"enter\":[null]},\"ClassPrivateProperty\":{\"enter\":[null]},\"AssignmentPattern\":{\"enter\":[null]},\"TypeCastExpression\":{\"enter\":[null,null]},\"CallExpression\":{\"enter\":[null]},\"OptionalCallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"ImportSpecifier\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"AnyTypeAnnotation\":{\"enter\":[null]},\"ArrayTypeAnnotation\":{\"enter\":[null]},\"BooleanTypeAnnotation\":{\"enter\":[null]},\"BooleanLiteralTypeAnnotation\":{\"enter\":[null]},\"NullLiteralTypeAnnotation\":{\"enter\":[null]},\"ClassImplements\":{\"enter\":[null]},\"DeclareClass\":{\"enter\":[null]},\"DeclareFunction\":{\"enter\":[null]},\"DeclareInterface\":{\"enter\":[null]},\"DeclareModule\":{\"enter\":[null]},\"DeclareModuleExports\":{\"enter\":[null]},\"DeclareTypeAlias\":{\"enter\":[null]},\"DeclareOpaqueType\":{\"enter\":[null]},\"DeclareVariable\":{\"enter\":[null]},\"DeclareExportDeclaration\":{\"enter\":[null]},\"DeclareExportAllDeclaration\":{\"enter\":[null]},\"DeclaredPredicate\":{\"enter\":[null]},\"ExistsTypeAnnotation\":{\"enter\":[null]},\"FunctionTypeAnnotation\":{\"enter\":[null]},\"FunctionTypeParam\":{\"enter\":[null]},\"GenericTypeAnnotation\":{\"enter\":[null]},\"InferredPredicate\":{\"enter\":[null]},\"InterfaceExtends\":{\"enter\":[null]},\"InterfaceDeclaration\":{\"enter\":[null]},\"InterfaceTypeAnnotation\":{\"enter\":[null]},\"IntersectionTypeAnnotation\":{\"enter\":[null]},\"MixedTypeAnnotation\":{\"enter\":[null]},\"EmptyTypeAnnotation\":{\"enter\":[null]},\"NullableTypeAnnotation\":{\"enter\":[null]},\"NumberLiteralTypeAnnotation\":{\"enter\":[null]},\"NumberTypeAnnotation\":{\"enter\":[null]},\"ObjectTypeAnnotation\":{\"enter\":[null]},\"ObjectTypeInternalSlot\":{\"enter\":[null]},\"ObjectTypeCallProperty\":{\"enter\":[null]},\"ObjectTypeIndexer\":{\"enter\":[null]},\"ObjectTypeProperty\":{\"enter\":[null]},\"ObjectTypeSpreadProperty\":{\"enter\":[null]},\"OpaqueType\":{\"enter\":[null]},\"QualifiedTypeIdentifier\":{\"enter\":[null]},\"StringLiteralTypeAnnotation\":{\"enter\":[null]},\"StringTypeAnnotation\":{\"enter\":[null]},\"ThisTypeAnnotation\":{\"enter\":[null]},\"TupleTypeAnnotation\":{\"enter\":[null]},\"TypeofTypeAnnotation\":{\"enter\":[null]},\"TypeAlias\":{\"enter\":[null]},\"TypeAnnotation\":{\"enter\":[null]},\"TypeParameter\":{\"enter\":[null]},\"TypeParameterDeclaration\":{\"enter\":[null]},\"TypeParameterInstantiation\":{\"enter\":[null]},\"UnionTypeAnnotation\":{\"enter\":[null]},\"Variance\":{\"enter\":[null]},\"VoidTypeAnnotation\":{\"enter\":[null]},\"ExportAllDeclaration\":{\"enter\":[null]},\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"loose\":false}},{\"key\":\"syntax-async-generators\",\"visitor\":{},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"syntax-object-rest-spread\",\"visitor\":{},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"syntax-json-strings\",\"visitor\":{},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"syntax-optional-catch-binding\",\"visitor\":{},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.4.3": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/kung/Projects/trainings/the-arts",
      "babelrc": false,
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "/Users/kung/Projects/trainings/the-arts",
      "filename": "/Users/kung/Projects/trainings/the-arts/url-to-withrouter.js",
      "configFile": false,
      "envName": "development",
      "root": "/Users/kung/Projects/trainings/the-arts",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "proposal-class-properties",
          "visitor": {
            "PrivateName": {
              "enter": [
                null
              ]
            },
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "transform-flow-strip-types",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            },
            "ImportDeclaration": {
              "enter": [
                null,
                null
              ]
            },
            "ClassProperty": {
              "enter": [
                null
              ]
            },
            "ClassPrivateProperty": {
              "enter": [
                null
              ]
            },
            "AssignmentPattern": {
              "enter": [
                null
              ]
            },
            "TypeCastExpression": {
              "enter": [
                null,
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "OptionalCallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "ImportSpecifier": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "AnyTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ArrayTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "BooleanTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "BooleanLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NullLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ClassImplements": {
              "enter": [
                null
              ]
            },
            "DeclareClass": {
              "enter": [
                null
              ]
            },
            "DeclareFunction": {
              "enter": [
                null
              ]
            },
            "DeclareInterface": {
              "enter": [
                null
              ]
            },
            "DeclareModule": {
              "enter": [
                null
              ]
            },
            "DeclareModuleExports": {
              "enter": [
                null
              ]
            },
            "DeclareTypeAlias": {
              "enter": [
                null
              ]
            },
            "DeclareOpaqueType": {
              "enter": [
                null
              ]
            },
            "DeclareVariable": {
              "enter": [
                null
              ]
            },
            "DeclareExportDeclaration": {
              "enter": [
                null
              ]
            },
            "DeclareExportAllDeclaration": {
              "enter": [
                null
              ]
            },
            "DeclaredPredicate": {
              "enter": [
                null
              ]
            },
            "ExistsTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "FunctionTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "FunctionTypeParam": {
              "enter": [
                null
              ]
            },
            "GenericTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "InferredPredicate": {
              "enter": [
                null
              ]
            },
            "InterfaceExtends": {
              "enter": [
                null
              ]
            },
            "InterfaceDeclaration": {
              "enter": [
                null
              ]
            },
            "InterfaceTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "IntersectionTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "MixedTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "EmptyTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NullableTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NumberLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NumberTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ObjectTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ObjectTypeInternalSlot": {
              "enter": [
                null
              ]
            },
            "ObjectTypeCallProperty": {
              "enter": [
                null
              ]
            },
            "ObjectTypeIndexer": {
              "enter": [
                null
              ]
            },
            "ObjectTypeProperty": {
              "enter": [
                null
              ]
            },
            "ObjectTypeSpreadProperty": {
              "enter": [
                null
              ]
            },
            "OpaqueType": {
              "enter": [
                null
              ]
            },
            "QualifiedTypeIdentifier": {
              "enter": [
                null
              ]
            },
            "StringLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "StringTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ThisTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TupleTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TypeofTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TypeAlias": {
              "enter": [
                null
              ]
            },
            "TypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TypeParameter": {
              "enter": [
                null
              ]
            },
            "TypeParameterDeclaration": {
              "enter": [
                null
              ]
            },
            "TypeParameterInstantiation": {
              "enter": [
                null
              ]
            },
            "UnionTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "Variance": {
              "enter": [
                null
              ]
            },
            "VoidTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ExportAllDeclaration": {
              "enter": [
                null
              ]
            },
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "loose": false
          }
        },
        {
          "key": "syntax-async-generators",
          "visitor": {
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "syntax-object-rest-spread",
          "visitor": {
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "syntax-json-strings",
          "visitor": {
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "syntax-optional-catch-binding",
          "visitor": {
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/kung/Projects/trainings/the-arts/url-to-withrouter.js",
        "plugins": [
          "classProperties",
          "classPrivateProperties",
          [
            "flow",
            {}
          ],
          "asyncGenerators",
          "objectRestSpread",
          "jsonStrings",
          "optionalCatchBinding"
        ]
      },
      "generatorOpts": {
        "filename": "/Users/kung/Projects/trainings/the-arts/url-to-withrouter.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/kung/Projects/trainings/the-arts",
        "sourceFileName": "url-to-withrouter.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = transformer;\n\nfunction addWithRouterImport(j, root) {\n  // We create an import specifier, this is the value of an import, eg:\n  // import {withRouter} from 'next/router\n  // The specifier would be `withRouter`\n  const withRouterSpecifier = j.importSpecifier(j.identifier('withRouter')); // Check if this file is already import `next/router`\n  // so that we can just attach `withRouter` instead of creating a new `import` node\n\n  const originalRouterImport = root.find(j.ImportDeclaration, {\n    source: {\n      value: 'next/router'\n    }\n  });\n\n  if (originalRouterImport.length > 0) {\n    // Check if `withRouter` is already imported. In that case we don't have to do anything\n    if (originalRouterImport.find(j.ImportSpecifier, {\n      imported: {\n        name: 'withRouter'\n      }\n    }).length > 0) {\n      return;\n    } // Attach `withRouter` to the existing `next/router` import node\n\n\n    originalRouterImport.forEach(node => {\n      node.value.specifiers.push(withRouterSpecifier);\n    });\n    return;\n  } // Create import node\n  // import {withRouter} from 'next/router'\n\n\n  const withRouterImport = j.importDeclaration([withRouterSpecifier], j.stringLiteral('next/router')); // Find the Program, this is the top level AST node\n\n  const Program = root.find(j.Program); // Attach the import at the top of the body\n\n  Program.forEach(node => {\n    node.value.body.unshift(withRouterImport);\n  });\n}\n\nfunction getThisPropsUrlNodes(j, tree) {\n  return tree.find(j.MemberExpression, {\n    object: {\n      type: 'MemberExpression',\n      object: {\n        type: 'ThisExpression'\n      },\n      property: {\n        name: 'props'\n      }\n    },\n    property: {\n      name: 'url'\n    }\n  });\n}\n\nfunction getPropsUrlNodes(j, tree, name) {\n  return tree.find(j.MemberExpression, {\n    object: {\n      name\n    },\n    property: {\n      name: 'url'\n    }\n  });\n} // Wraps the provided node in a function call\n// For example if `functionName` is `withRouter` it will wrap the provided node in `withRouter(NODE_CONTENT)`\n\n\nfunction wrapNodeInFunction(j, functionName, args) {\n  const mappedArgs = args.map(node => {\n    // If the node is a ClassDeclaration we have to turn it into a ClassExpression\n    // since ClassDeclarations can't be wrapped in a function\n    if (node.type === 'ClassDeclaration') {\n      node.type = 'ClassExpression';\n    }\n\n    return node;\n  });\n  return j.callExpression(j.identifier(functionName), mappedArgs);\n}\n\nfunction turnUrlIntoRouter(j, tree) {\n  tree.find(j.Identifier, {\n    name: 'url'\n  }).replaceWith(j.identifier('router'));\n}\n\nfunction transformer(file, api) {\n  // j is just a shorthand for the jscodeshift api\n  const j = api.jscodeshift; // this is the AST root on which we can call methods like `.find`\n\n  const root = j(file.source); // We search for `export default`\n\n  const defaultExports = root.find(j.ExportDefaultDeclaration); // We loop over the `export default` instances\n  // This is just how jscodeshift works, there can only be one export default instance\n\n  defaultExports.forEach(rule => {\n    // rule.value is an AST node\n    const {\n      value: node\n    } = rule; // declaration holds the AST node for what comes after `export default`\n\n    const {\n      declaration\n    } = node;\n\n    function wrapDefaultExportInWithRouter() {\n      if (j(rule).find(j.CallExpression, {\n        callee: {\n          name: 'withRouter'\n        }\n      }).length > 0) {\n        return;\n      }\n\n      j(rule).replaceWith(j.exportDefaultDeclaration(wrapNodeInFunction(j, 'withRouter', [declaration])));\n    } // The `Identifier` type is given in this case:\n    // export default Test\n    // where `Test` is the identifier\n\n\n    if (declaration.type === 'Identifier') {\n      // the variable name\n      const {\n        name\n      } = declaration; // find the implementation of the variable, can be a class, function, etc\n\n      let implementation = root.find(j.Declaration, {\n        id: {\n          name\n        }\n      });\n\n      if (implementation.length === 0) {\n        implementation = root.find(j.VariableDeclarator, {\n          id: {\n            name\n          }\n        });\n      }\n\n      implementation.find(j.Property, {\n        key: {\n          name: 'url'\n        }\n      }).forEach(propertyRule => {\n        const isThisPropsDestructure = j(propertyRule).closest(j.VariableDeclarator, {\n          init: {\n            object: {\n              type: 'ThisExpression'\n            },\n            property: {\n              name: 'props'\n            }\n          }\n        });\n\n        if (isThisPropsDestructure.length === 0) {\n          return;\n        }\n\n        const originalKeyValue = propertyRule.value.value.name;\n        propertyRule.value.key.name = 'router';\n        wrapDefaultExportInWithRouter();\n        addWithRouterImport(j, root); // If the property is reassigned to another variable we don't have to transform it\n\n        if (originalKeyValue !== 'url') {\n          return;\n        }\n\n        propertyRule.value.value.name = 'router';\n        j(propertyRule).closest(j.BlockStatement).find(j.Identifier, identifierNode => {\n          if (identifierNode.type === 'JSXIdentifier') {\n            return false;\n          }\n\n          if (identifierNode.name !== 'url') {\n            return false;\n          }\n\n          return true;\n        }).replaceWith(j.identifier('router'));\n      }); // Find usage of `this.props.url`\n\n      const thisPropsUrlUsage = getThisPropsUrlNodes(j, implementation);\n\n      if (thisPropsUrlUsage.length === 0) {\n        return;\n      } // rename `url` to `router`\n\n\n      turnUrlIntoRouter(j, thisPropsUrlUsage);\n      wrapDefaultExportInWithRouter();\n      addWithRouterImport(j, root);\n      return;\n    }\n\n    const arrowFunctions = j(rule).find(j.ArrowFunctionExpression);\n\n    (() => {\n      if (arrowFunctions.length === 0) {\n        return;\n      }\n\n      arrowFunctions.forEach(r => {\n        // This makes sure we don't match nested functions, only the top one\n        if (j(r).closest(j.Expression).length !== 0) {\n          return;\n        }\n\n        if (!r.value.params || !r.value.params[0]) {\n          return;\n        }\n\n        const name = r.value.params[0].name;\n        const propsUrlUsage = getPropsUrlNodes(j, j(r), name);\n\n        if (propsUrlUsage.length === 0) {\n          return;\n        }\n\n        turnUrlIntoRouter(j, propsUrlUsage);\n        wrapDefaultExportInWithRouter();\n        addWithRouterImport(j, root);\n      });\n      return;\n    })();\n\n    if (declaration.type === 'CallExpression') {\n      j(rule).find(j.CallExpression, haystack => {\n        const firstArgument = haystack.arguments[0] || {};\n\n        if (firstArgument.type === 'Identifier') {\n          return true;\n        }\n\n        return false;\n      }).forEach(callRule => {\n        const {\n          name\n        } = callRule.value.arguments[0]; // find the implementation of the variable, can be a class, function, etc\n\n        let implementation = root.find(j.Declaration, {\n          id: {\n            name\n          }\n        });\n\n        if (implementation.length === 0) {\n          implementation = root.find(j.VariableDeclarator, {\n            id: {\n              name\n            }\n          });\n        } // Find usage of `this.props.url`\n\n\n        const thisPropsUrlUsage = getThisPropsUrlNodes(j, implementation);\n        implementation.find(j.Property, {\n          key: {\n            name: 'url'\n          }\n        }).forEach(propertyRule => {\n          const isThisPropsDestructure = j(propertyRule).closest(j.VariableDeclarator, {\n            init: {\n              object: {\n                type: 'ThisExpression'\n              },\n              property: {\n                name: 'props'\n              }\n            }\n          });\n\n          if (isThisPropsDestructure.length === 0) {\n            return;\n          }\n\n          const originalKeyValue = propertyRule.value.value.name;\n          propertyRule.value.key.name = 'router';\n          wrapDefaultExportInWithRouter();\n          addWithRouterImport(j, root); // If the property is reassigned to another variable we don't have to transform it\n\n          if (originalKeyValue !== 'url') {\n            return;\n          }\n\n          propertyRule.value.value.name = 'router';\n          j(propertyRule).closest(j.BlockStatement).find(j.Identifier, identifierNode => {\n            if (identifierNode.type === 'JSXIdentifier') {\n              return false;\n            }\n\n            if (identifierNode.name !== 'url') {\n              return false;\n            }\n\n            return true;\n          }).replaceWith(j.identifier('router'));\n        });\n\n        if (thisPropsUrlUsage.length === 0) {\n          return;\n        } // rename `url` to `router`\n\n\n        turnUrlIntoRouter(j, thisPropsUrlUsage);\n        wrapDefaultExportInWithRouter();\n        addWithRouterImport(j, root);\n        return;\n      });\n    }\n\n    j(rule).find(j.Property, {\n      key: {\n        name: 'url'\n      }\n    }).forEach(propertyRule => {\n      const isThisPropsDestructure = j(propertyRule).closest(j.VariableDeclarator, {\n        init: {\n          object: {\n            type: 'ThisExpression'\n          },\n          property: {\n            name: 'props'\n          }\n        }\n      });\n\n      if (isThisPropsDestructure.length === 0) {\n        return;\n      }\n\n      const originalKeyValue = propertyRule.value.value.name;\n      propertyRule.value.key.name = 'router';\n      wrapDefaultExportInWithRouter();\n      addWithRouterImport(j, root); // If the property is reassigned to another variable we don't have to transform it\n\n      if (originalKeyValue !== 'url') {\n        return;\n      }\n\n      propertyRule.value.value.name = 'router';\n      j(propertyRule).closest(j.BlockStatement).find(j.Identifier, identifierNode => {\n        if (identifierNode.type === 'JSXIdentifier') {\n          return false;\n        }\n\n        if (identifierNode.name !== 'url') {\n          return false;\n        }\n\n        return true;\n      }).replaceWith(j.identifier('router'));\n    });\n    j(rule).find(j.MethodDefinition, {\n      key: {\n        name: 'componentWillReceiveProps'\n      }\n    }).forEach(methodRule => {\n      const func = methodRule.value.value;\n\n      if (!func.params[0]) {\n        return;\n      }\n\n      const firstArgumentName = func.params[0].name;\n      const propsUrlUsage = getPropsUrlNodes(j, j(methodRule), firstArgumentName);\n      turnUrlIntoRouter(j, propsUrlUsage);\n\n      if (propsUrlUsage.length === 0) {\n        return;\n      }\n\n      wrapDefaultExportInWithRouter();\n      addWithRouterImport(j, root);\n    });\n    j(rule).find(j.MethodDefinition, {\n      key: {\n        name: 'componentDidUpdate'\n      }\n    }).forEach(methodRule => {\n      const func = methodRule.value.value;\n\n      if (!func.params[0]) {\n        return;\n      }\n\n      const firstArgumentName = func.params[0].name;\n      const propsUrlUsage = getPropsUrlNodes(j, j(methodRule), firstArgumentName);\n      turnUrlIntoRouter(j, propsUrlUsage);\n\n      if (propsUrlUsage.length === 0) {\n        return;\n      }\n\n      wrapDefaultExportInWithRouter();\n      addWithRouterImport(j, root);\n    });\n    const thisPropsUrlUsage = getThisPropsUrlNodes(j, j(rule));\n    const propsUrlUsage = getPropsUrlNodes(j, j(rule), 'props'); // rename `url` to `router`\n\n    turnUrlIntoRouter(j, thisPropsUrlUsage);\n    turnUrlIntoRouter(j, propsUrlUsage);\n\n    if (thisPropsUrlUsage.length === 0 && propsUrlUsage.length === 0) {\n      return;\n    }\n\n    wrapDefaultExportInWithRouter();\n    addWithRouterImport(j, root);\n    return;\n  });\n  return root.toSource();\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
    "map": {
      "version": 3,
      "sources": [
        "url-to-withrouter.js"
      ],
      "names": [
        "addWithRouterImport",
        "j",
        "root",
        "withRouterSpecifier",
        "importSpecifier",
        "identifier",
        "originalRouterImport",
        "find",
        "ImportDeclaration",
        "source",
        "value",
        "length",
        "ImportSpecifier",
        "imported",
        "name",
        "forEach",
        "node",
        "specifiers",
        "push",
        "withRouterImport",
        "importDeclaration",
        "stringLiteral",
        "Program",
        "body",
        "unshift",
        "getThisPropsUrlNodes",
        "tree",
        "MemberExpression",
        "object",
        "type",
        "property",
        "getPropsUrlNodes",
        "wrapNodeInFunction",
        "functionName",
        "args",
        "mappedArgs",
        "map",
        "callExpression",
        "turnUrlIntoRouter",
        "Identifier",
        "replaceWith",
        "transformer",
        "file",
        "api",
        "jscodeshift",
        "defaultExports",
        "ExportDefaultDeclaration",
        "rule",
        "declaration",
        "wrapDefaultExportInWithRouter",
        "CallExpression",
        "callee",
        "exportDefaultDeclaration",
        "implementation",
        "Declaration",
        "id",
        "VariableDeclarator",
        "Property",
        "key",
        "propertyRule",
        "isThisPropsDestructure",
        "closest",
        "init",
        "originalKeyValue",
        "BlockStatement",
        "identifierNode",
        "thisPropsUrlUsage",
        "arrowFunctions",
        "ArrowFunctionExpression",
        "r",
        "Expression",
        "params",
        "propsUrlUsage",
        "haystack",
        "firstArgument",
        "arguments",
        "callRule",
        "MethodDefinition",
        "methodRule",
        "func",
        "firstArgumentName",
        "toSource"
      ],
      "mappings": "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",
      "sourceRoot": "/Users/kung/Projects/trainings/the-arts",
      "sourcesContent": [
        "function addWithRouterImport(j, root) {\n\t// We create an import specifier, this is the value of an import, eg:\n\t// import {withRouter} from 'next/router\n\t// The specifier would be `withRouter`\n\tconst withRouterSpecifier = j.importSpecifier(j.identifier('withRouter'));\n\n\t// Check if this file is already import `next/router`\n\t// so that we can just attach `withRouter` instead of creating a new `import` node\n\tconst originalRouterImport = root.find(j.ImportDeclaration, {\n\t\tsource: {\n\t\t\tvalue: 'next/router'\n\t\t}\n\t});\n\tif (originalRouterImport.length > 0) {\n\t\t// Check if `withRouter` is already imported. In that case we don't have to do anything\n\t\tif (originalRouterImport.find(j.ImportSpecifier, {imported: {name: 'withRouter'}}).length > 0) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Attach `withRouter` to the existing `next/router` import node\n\t\toriginalRouterImport.forEach((node) => {\n\t\t\tnode.value.specifiers.push(withRouterSpecifier);\n\t\t});\n\t\treturn;\n\t}\n\n\t// Create import node\n\t// import {withRouter} from 'next/router'\n\tconst withRouterImport = j.importDeclaration([\n\t\twithRouterSpecifier\n\t], j.stringLiteral('next/router'));\n\n\t// Find the Program, this is the top level AST node\n\tconst Program = root.find(j.Program);\n\t// Attach the import at the top of the body\n\tProgram.forEach((node) => {\n\t\tnode.value.body.unshift(withRouterImport);\n\t});\n}\n\nfunction getThisPropsUrlNodes(j, tree) {\n\treturn tree.find(j.MemberExpression, {\n\t\tobject: {\n\t\t\ttype: 'MemberExpression',\n\t\t\tobject: {type: 'ThisExpression'},\n\t\t\tproperty: {name: 'props'}\n\t\t},\n\t\tproperty: {name: 'url'}\n\t});\n}\n\nfunction getPropsUrlNodes(j, tree, name) {\n\treturn tree.find(j.MemberExpression, {\n\t\tobject: {name},\n\t\tproperty: {name: 'url'}\n\t});\n}\n\n// Wraps the provided node in a function call\n// For example if `functionName` is `withRouter` it will wrap the provided node in `withRouter(NODE_CONTENT)`\nfunction wrapNodeInFunction(j, functionName, args) {\n\tconst mappedArgs = args.map((node) => {\n\t\t// If the node is a ClassDeclaration we have to turn it into a ClassExpression\n\t\t// since ClassDeclarations can't be wrapped in a function\n\t\tif (node.type === 'ClassDeclaration') {\n\t\t\tnode.type = 'ClassExpression';\n\t\t}\n\n\t\treturn node;\n\t});\n\treturn j.callExpression(j.identifier(functionName), mappedArgs);\n}\n\nfunction turnUrlIntoRouter(j, tree) {\n\ttree.find(j.Identifier, {name: 'url'}).replaceWith(j.identifier('router'));\n}\n\nexport default function transformer(file, api) {\n\t// j is just a shorthand for the jscodeshift api\n\tconst j = api.jscodeshift;\n\t// this is the AST root on which we can call methods like `.find`\n\tconst root = j(file.source);\n\n\t// We search for `export default`\n\tconst defaultExports = root.find(j.ExportDefaultDeclaration);\n\n\t// We loop over the `export default` instances\n\t// This is just how jscodeshift works, there can only be one export default instance\n\tdefaultExports.forEach((rule) => {\n\t\t// rule.value is an AST node\n\t\tconst {value: node} = rule;\n\t\t// declaration holds the AST node for what comes after `export default`\n\t\tconst {declaration} = node;\n\n\t\tfunction wrapDefaultExportInWithRouter() {\n\t\t\tif (j(rule).find(j.CallExpression, {callee: {name: 'withRouter'}}).length > 0) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tj(rule).replaceWith(j.exportDefaultDeclaration(wrapNodeInFunction(j, 'withRouter', [declaration])));\n\t\t}\n\n\t\t// The `Identifier` type is given in this case:\n\t\t// export default Test\n\t\t// where `Test` is the identifier\n\t\tif (declaration.type === 'Identifier') {\n\t\t\t// the variable name\n\t\t\tconst {name} = declaration;\n\n\t\t\t// find the implementation of the variable, can be a class, function, etc\n\t\t\tlet implementation = root.find(j.Declaration, {id: {name}});\n\t\t\tif (implementation.length === 0) {\n\t\t\t\timplementation = root.find(j.VariableDeclarator, {id: {name}});\n\t\t\t}\n\n\t\t\timplementation.find(j.Property, {key: {name: 'url'}}).forEach((propertyRule) => {\n\t\t\t\tconst isThisPropsDestructure = j(propertyRule).closest(j.VariableDeclarator, {\n\t\t\t\t\tinit: {\n\t\t\t\t\t\tobject: {\n\t\t\t\t\t\t\ttype: 'ThisExpression'\n\t\t\t\t\t\t},\n\t\t\t\t\t\tproperty: {name: 'props'}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tif (isThisPropsDestructure.length === 0) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tconst originalKeyValue = propertyRule.value.value.name;\n\t\t\t\tpropertyRule.value.key.name = 'router';\n\t\t\t\twrapDefaultExportInWithRouter();\n\t\t\t\taddWithRouterImport(j, root);\n\t\t\t\t// If the property is reassigned to another variable we don't have to transform it\n\t\t\t\tif (originalKeyValue !== 'url') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tpropertyRule.value.value.name = 'router';\n\t\t\t\tj(propertyRule).closest(j.BlockStatement)\n\t\t\t\t\t.find(j.Identifier, (identifierNode) => {\n\t\t\t\t\t\tif (identifierNode.type === 'JSXIdentifier') {\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (identifierNode.name !== 'url') {\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t})\n\t\t\t\t\t.replaceWith(j.identifier('router'));\n\t\t\t});\n\n\t\t\t// Find usage of `this.props.url`\n\t\t\tconst thisPropsUrlUsage = getThisPropsUrlNodes(j, implementation);\n\n\t\t\tif (thisPropsUrlUsage.length === 0) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// rename `url` to `router`\n\t\t\tturnUrlIntoRouter(j, thisPropsUrlUsage);\n\t\t\twrapDefaultExportInWithRouter();\n\t\t\taddWithRouterImport(j, root);\n\t\t\treturn;\n\t\t}\n\n\t\tconst arrowFunctions = j(rule).find(j.ArrowFunctionExpression);\n\t\t(() => {\n\t\t\tif (arrowFunctions.length === 0) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tarrowFunctions.forEach((r) => {\n\t\t\t\t// This makes sure we don't match nested functions, only the top one\n\t\t\t\tif (j(r).closest(j.Expression).length !== 0) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (!r.value.params || !r.value.params[0]) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst name = r.value.params[0].name;\n\t\t\t\tconst propsUrlUsage = getPropsUrlNodes(j, j(r), name);\n\t\t\t\tif (propsUrlUsage.length === 0) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tturnUrlIntoRouter(j, propsUrlUsage);\n\t\t\t\twrapDefaultExportInWithRouter();\n\t\t\t\taddWithRouterImport(j, root);\n\t\t\t});\n\t\t\treturn;\n\t\t})();\n\n\t\tif (declaration.type === 'CallExpression') {\n\t\t\tj(rule).find(j.CallExpression, (haystack) => {\n\t\t\t\tconst firstArgument = haystack.arguments[0] || {};\n\t\t\t\tif (firstArgument.type === 'Identifier') {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\treturn false;\n\t\t\t})\n\t\t\t\t.forEach((callRule) => {\n\t\t\t\t\tconst {name} = callRule.value.arguments[0];\n\n\t\t\t\t\t// find the implementation of the variable, can be a class, function, etc\n\t\t\t\t\tlet implementation = root.find(j.Declaration, {id: {name}});\n\t\t\t\t\tif (implementation.length === 0) {\n\t\t\t\t\t\timplementation = root.find(j.VariableDeclarator, {id: {name}});\n\t\t\t\t\t}\n\t\t\t\t\t// Find usage of `this.props.url`\n\t\t\t\t\tconst thisPropsUrlUsage = getThisPropsUrlNodes(j, implementation);\n\n\t\t\t\t\timplementation.find(j.Property, {key: {name: 'url'}}).forEach((propertyRule) => {\n\t\t\t\t\t\tconst isThisPropsDestructure = j(propertyRule).closest(j.VariableDeclarator, {\n\t\t\t\t\t\t\tinit: {\n\t\t\t\t\t\t\t\tobject: {\n\t\t\t\t\t\t\t\t\ttype: 'ThisExpression'\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tproperty: {name: 'props'}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t\tif (isThisPropsDestructure.length === 0) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconst originalKeyValue = propertyRule.value.value.name;\n\t\t\t\t\t\tpropertyRule.value.key.name = 'router';\n\t\t\t\t\t\twrapDefaultExportInWithRouter();\n\t\t\t\t\t\taddWithRouterImport(j, root);\n\t\t\t\t\t\t// If the property is reassigned to another variable we don't have to transform it\n\t\t\t\t\t\tif (originalKeyValue !== 'url') {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tpropertyRule.value.value.name = 'router';\n\t\t\t\t\t\tj(propertyRule).closest(j.BlockStatement)\n\t\t\t\t\t\t\t.find(j.Identifier, (identifierNode) => {\n\t\t\t\t\t\t\t\tif (identifierNode.type === 'JSXIdentifier') {\n\t\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tif (identifierNode.name !== 'url') {\n\t\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t.replaceWith(j.identifier('router'));\n\t\t\t\t\t});\n\n\t\t\t\t\tif (thisPropsUrlUsage.length === 0) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\t// rename `url` to `router`\n\t\t\t\t\tturnUrlIntoRouter(j, thisPropsUrlUsage);\n\t\t\t\t\twrapDefaultExportInWithRouter();\n\t\t\t\t\taddWithRouterImport(j, root);\n\t\t\t\t\treturn;\n\t\t\t\t});\n\t\t}\n\n\t\tj(rule).find(j.Property, {key: {name: 'url'}})\n\t\t\t.forEach((propertyRule) => {\n\t\t\t\tconst isThisPropsDestructure = j(propertyRule).closest(j.VariableDeclarator, {\n\t\t\t\t\tinit: {\n\t\t\t\t\t\tobject: {\n\t\t\t\t\t\t\ttype: 'ThisExpression'\n\t\t\t\t\t\t},\n\t\t\t\t\t\tproperty: {name: 'props'}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tif (isThisPropsDestructure.length === 0) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tconst originalKeyValue = propertyRule.value.value.name;\n\t\t\t\tpropertyRule.value.key.name = 'router';\n\t\t\t\twrapDefaultExportInWithRouter();\n\t\t\t\taddWithRouterImport(j, root);\n\t\t\t\t// If the property is reassigned to another variable we don't have to transform it\n\t\t\t\tif (originalKeyValue !== 'url') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tpropertyRule.value.value.name = 'router';\n\t\t\t\tj(propertyRule).closest(j.BlockStatement)\n\t\t\t\t\t.find(j.Identifier, (identifierNode) => {\n\t\t\t\t\t\tif (identifierNode.type === 'JSXIdentifier') {\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (identifierNode.name !== 'url') {\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t})\n\t\t\t\t\t.replaceWith(j.identifier('router'));\n\t\t\t});\n\n\t\tj(rule).find(j.MethodDefinition, {key: {name: 'componentWillReceiveProps'}})\n\t\t\t.forEach((methodRule) => {\n\t\t\t\tconst func = methodRule.value.value;\n\t\t\t\tif (!func.params[0]) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tconst firstArgumentName = func.params[0].name;\n\t\t\t\tconst propsUrlUsage = getPropsUrlNodes(j, j(methodRule), firstArgumentName);\n\t\t\t\tturnUrlIntoRouter(j, propsUrlUsage);\n\t\t\t\tif (propsUrlUsage.length === 0) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\twrapDefaultExportInWithRouter();\n\t\t\t\taddWithRouterImport(j, root);\n\t\t\t});\n\n\t\tj(rule).find(j.MethodDefinition, {key: {name: 'componentDidUpdate'}})\n\t\t\t.forEach((methodRule) => {\n\t\t\t\tconst func = methodRule.value.value;\n\t\t\t\tif (!func.params[0]) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tconst firstArgumentName = func.params[0].name;\n\t\t\t\tconst propsUrlUsage = getPropsUrlNodes(j, j(methodRule), firstArgumentName);\n\t\t\t\tturnUrlIntoRouter(j, propsUrlUsage);\n\t\t\t\tif (propsUrlUsage.length === 0) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\twrapDefaultExportInWithRouter();\n\t\t\t\taddWithRouterImport(j, root);\n\t\t\t});\n\n\t\tconst thisPropsUrlUsage = getThisPropsUrlNodes(j, j(rule));\n\t\tconst propsUrlUsage = getPropsUrlNodes(j, j(rule), 'props');\n\n\t\t// rename `url` to `router`\n\t\tturnUrlIntoRouter(j, thisPropsUrlUsage);\n\t\tturnUrlIntoRouter(j, propsUrlUsage);\n\n\t\tif (thisPropsUrlUsage.length === 0 && propsUrlUsage.length === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\twrapDefaultExportInWithRouter();\n\t\taddWithRouterImport(j, root);\n\t\treturn;\n\t});\n\n\treturn root.toSource();\n}\n"
      ]
    },
    "sourceType": "script",
    "mtime": 1529679498000
  }
}